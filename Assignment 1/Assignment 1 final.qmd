---
title: "Assignment 1"
author: "24694274"
format: html
editor: visual
---

## Assignment 1

Quarto enables you to weave together content and executable code into a finished document. To learn more about Quarto see <https://quarto.org>.

## Reading CSV's

```{r}
library(tidyverse)
library(ggplot2)
library(ggpol)
library(ggpubr)
library(plyr)
library(dplyr)
library(gridExtra)
library(scales)
library(zoo)
library(ggmap)
library(plotly)
library(ggplot2)
library(leaflet)
library(lubridate)



covid_cases_csv <- read.csv("covid-cases-deaths.csv")
covid_hospitalisation_csv <- read.csv("covid-hospitalisations.csv")
cumulative_case_csv <- read.csv("cumulative-case-data.csv")
provinces_case_csv <- read.csv("provinces_data.csv")
country_csv <- read.csv("county_time_series_covid19_US.csv")
doses_csv <-
  read.csv("time_series_covid19_vaccine_doses_admin_global.csv")
vaccine_csv <- read.csv("time_series_covid19_vaccine_global.csv")
covid_levels_csv <- read.csv("covidLevels.csv")

```

Part A: Diagram 1:

```{r}
vac_clean <- cumulative_case_csv |>
  mutate(date = as.Date(date, format = "%d-%m-%Y"))

vac_per_day <- vac_clean |>
  filter(date >= as.Date("2022-03-31") &
           date <= as.Date("2022-04-07")) |>
  select(date, vaccinated_daily) |>
  arrange(desc(date))

vac_April <- vac_clean |>
  filter(date >= as.Date("2021-04-01") &
           date <= as.Date("2022-04-01")) |>
  select(date, vaccinated_daily)

sidebar_text <-
  paste(strftime(vac_per_day$date, format = "%d %B"),
        vac_per_day$vaccinated_daily,
        sep = " - ")

sidebar_data <- data.frame(text = sidebar_text)


sidebar_data$text[1] <- "VACCINATIONS PER DAY"


graph1 <- ggplot(vac_April, aes(x = date, y = vaccinated_daily)) +
  geom_col(color = "darkgreen") +
  theme(
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    axis.title.x = element_blank(),
    axis.title.y = element_blank(),
    axis.line = element_blank(),
    plot.caption = element_text(hjust = 0),
    panel.grid.major.y = element_line(linetype = "dashed", color = "gray")
  ) +
  scale_y_continuous(labels = scales::comma) +
  scale_x_date(date_labels = "%d%b") +
  labs(caption = "Updated: 7 April 2022")

grob_table <- tableGrob(sidebar_data$text,
                        theme = ttheme_default(base_size = 10, core = list(bg_params = list(fill =
                                                                                              'transparent'))),
                        rows = NULL)

grid.arrange(graph1,
             grob_table,
             ncol = 2,
             widths = c(0.7, 0.3))
```

Graph 2:

```{r}
cases_clean <- cumulative_case_csv |>
  mutate(date = as.Date(date, format = "%d-%m-%Y"))

cases_per_day <- cases_clean |>
  filter(date >= as.Date("2020-03-01") &
           date <= as.Date("2022-04-01")) |>
  select(date, cases_daily, X7_day_weekly_average)

covid_levels <- covid_levels_csv |>
  mutate(
    date_from = as.Date(date_from, format = "%d-%m-%Y"),
    date_to = as.Date(date_to, format = "%d-%m-%Y")
  )

graph2 <- ggplot() +
  geom_rect(
    data = covid_levels,
    aes(
      xmin = date_from,
      xmax = date_to,
      ymin = -Inf,
      ymax = Inf,
      fill = factor(level)
    ),
    alpha = 0.7
  ) +
  geom_text(
    data = covid_levels,
    aes(
      x = as.Date((
        as.integer(date_from) + as.integer(date_to)
      ) / 2),
      y = Inf,
      label = paste("L", level)
    ),
    vjust = 1.5,
    size = 3
  ) +
  geom_col(data = cases_per_day,
           aes(x = date, y = cases_daily),
           color = "#306FA8") +
  geom_line(data = cases_per_day,
            aes(x = date, y = X7_day_weekly_average),
            color = "red") +
  theme_classic() +
  labs(caption = "Updated: 7 April 2022",
       subtitle = "This chart shows the daily confirmed cases since March 2020. The levels refer to the lockdown levels. Red line is the 7-day rolling average") +
  theme(
    axis.title.x = element_blank(),
    axis.title.y = element_blank(),
    axis.line = element_blank(),
    panel.grid.major.y = element_line(color = "grey", linetype = "dashed"),
    plot.caption = element_text(hjust = 0)
  ) +
  scale_x_date(date_labels = "%d%b", date_breaks = "3 months") +
  scale_y_continuous(labels = scales::comma) +
  scale_fill_manual(
    values = c(
      "1" = "white",
      "2" = "lightgrey",
      "3" = "grey",
      "4" = "darkgrey",
      "5" = "black"
    ),
    guide = FALSE
  )



graph2
```

Graph 3:

```{r}
active_cases_per_day <- cases_clean |>
  filter(date >= as.Date("2020-03-01") &
           date <= as.Date("2022-04-01")) |>
  select(date, active_cases)

graph3 <-
  ggplot(active_cases_per_day, aes(x = date, y = active_cases)) +
  geom_col(color = "#306FA8") +
  theme_classic() +
  labs(caption = "Updated: 7 April 2022") +
  theme(
    axis.title.x = element_blank(),
    axis.title.y = element_blank(),
    axis.line = element_blank(),
    panel.grid.major.y = element_line(color = "grey", linetype = "dashed"),
    plot.caption = element_text(hjust = 0)
  ) +
  scale_x_date(date_labels = "%d%b", date_breaks = "3 months") +
  scale_y_continuous(labels = scales::comma,
                     breaks = seq(0, 200000, by = 100000))

graph3
```

Graph 4:

```{r}
provinces_per_day <- provinces_case_csv |>
  filter(date >= "2021-08-28" & date <= "2022-04-07") |>
  group_by(subregion1_name) |>
  mutate(roll_Average = zoo::rollmean(
    new_confirmed,
    k = 7,
    fill = NA,
    align = "right"
  )) |>
  select(date, new_confirmed, subregion1_name, roll_Average)

dates <- as.Date(c("2021-08-28", "2022-04-07"))

graph4 <- provinces_per_day |>
  ggplot(mapping = aes(x = date, y = roll_Average)) +
  geom_line(aes(group = subregion1_name)) +
  facet_wrap( ~ subregion1_name) +
  labs(x = "",
       y = "") +
  theme(panel.grid.major = element_blank(),
        panel.grid.minor = element_blank()) +
  scale_y_continuous(breaks = NULL)


graph4
```

Graph 5:

```{r}
active_cum <- cases_clean |>
  filter(date <= as.Date("2022-04-07")) |> 
  select(date, active_cases, cumulative_cases)

graph5 <- ggplot(active_cum, aes(x = date)) +
  geom_text(data = subset(active_cum, date == max(date)),
            aes(y = active_cases, label = scales:: comma(active_cases)),
            size = 3, fontface = "bold", color = "black",
            nudge_y = 1000, hjust = 0.5, vjust = -0.9
  ) +
  geom_text(data = subset(active_cum, date == max(date)),
            aes(y = cumulative_cases, label = scales:: comma(cumulative_cases)),
            size = 3, fontface = "bold", color = "black",
            nudge_y = 1000, hjust = 0.5, vjust = -0.9
  ) +
  geom_line(aes(y = active_cases, color = "Confirmed cases")) +
  geom_line(aes(y = cumulative_cases, color = "Active cases")) +
  scale_y_continuous(labels = scales::comma,
                     breaks = seq(0, 3000000, by = 1000000)) +
  scale_x_date(date_labels = "%d/%m", date_breaks = "1 year") +
  theme(
    plot.background = element_rect(fill = "white"),
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    axis.title.x = element_blank(),
    axis.title.y = element_blank(),
    plot.caption = element_text(hjust = 0),
    legend.position = c(0.2, 0.8),
    legend.background = element_rect(fill = "transparent")
  ) +
  labs(caption = "Updated: 7 April 2022") +
  scale_color_manual(
    values = c("red", "blue"),
    labels = c("Confirmed cases", "Active cases")
  )

print(graph5)
```

Graph 6:

```{r}
provinces <- provinces_case_csv |>
  filter(!is.na(new_confirmed) & date <= "2022-04-07") |>
  group_by(subregion1_name) |>
  reframe(infected_100 = (sum(new_confirmed) / population) * 100000) |>
  distinct()

graph6 <-
  ggplot(provinces, aes(x = infected_100, y = reorder(subregion1_name, infected_100))) +
  geom_bar(stat = "identity",
           width = .9,
           fill = "tomato") +
  theme(
    axis.text.x = element_blank(),
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    axis.title.x = element_blank(),
    plot.caption = element_text(hjust = 0),
    axis.title.y = element_blank()
  ) +
  labs(caption = "Updated: 7 April 2022") +
  geom_text(
    aes(label = round(infected_100, 2)),
    hjust = 0,
    color = "black",
    size = 2
  )

graph6
```

Graph 7:

```         
  r
}
vac_filtered <- vac_clean  |>
  filter(date <= as.Date("2022-04-07") & !is.na(date) & date >= as.Date("2020-04-07"))  |>
  mutate(
    daily_recoveries = recoveries - lag(recoveries),
    average_deaths = zoo::rollmean(
      deaths_daily,
      k = 31,
      fill = NA
    ),
    average_recoveries = zoo::rollmean(
      daily_recoveries,
      k = 31,
      fill = NA
    ),
    average_cases = zoo::rollmean(
      cases_daily,
      k = 31,
      fill = NA
    ),
    no_longer_cases = average_recoveries + average_deaths,
    Rt = average_cases/ no_longer_cases
  )


graph7 <- ggplot(vac_filtered, aes(x = date, y = Rt)) +
  geom_hline(yintercept = 1, linetype = "dashed") +
  geom_ribbon(
    aes(ymin = Rt - 0.5, ymax = Rt + 0.5, fill = "90% CONFIDENCE INTERVAL"),
    alpha = 0.9
  ) +
  geom_text(data = subset(vac_filtered, date == ymd("2022-02-21")), aes(x = ymd("2022-01-01"), y = 2.7, label = paste("21 Feb \n Rt:", round(Rt, 2) ))) +
  geom_point(color = "red") +
  geom_line(data = vac_filtered, aes(x = date, y = Rt),color = "red") +
  labs(caption = "Updated: 21 February 2022",
       x = "Date",
       y = "Rt Value") +
  theme(
    plot.caption = element_text(hjust = 0),
    axis.title.x = element_blank(),
    axis.title.y = element_blank(),
    axis.line = element_blank(),
    panel.grid.major.y = element_line(color = "grey", linetype = "dashed"),
    panel.grid.minor = element_blank(),
    legend.position = c(0.8, 0.9)
  ) +
  scale_x_date(date_labels = "%b %Y", date_breaks = "3 months") +
  scale_fill_manual(name = NULL, values = c("90% CONFIDENCE INTERVAL"="grey"))

graph7
```

Part B: Graph 1:

```{r}
hospital_clean <- covid_hospitalisation_csv |>
  mutate(date = as.Date(week_start, format = "%Y-%m-%d")) |>
  select(date, total_national_hospital_admissions)

graph8 <-
  ggplot(hospital_clean,
         aes(x = date, y = total_national_hospital_admissions)) +
  geom_bar(stat = "identity",
           width = 5,
           fill = "tomato3") +
  labs(title = "Ordered Bar Chart",
       subtitle = "Hospital Admissions during COVID",
       y = "Number of Hospital Admissions") +
  theme(
    axis.text.x = element_text(angle = 65, vjust = 0.6),
    panel.grid.major = element_blank(),
    panel.grid.minor = element_blank(),
    panel.grid.major.y = element_line(color = "grey", linetype = "dashed")
  ) +
  theme_minimal()

graph8
#Here I am showing the number of hospital admissions that happened during covid, to show hospital spikes for further research
```

Graph 2:

```{r}
case_vs_death <- vac_clean |>
  select(date, deaths_daily, vaccinated_daily, active_cases)

graph9 <- ggplot(case_vs_death, aes(x = date)) +
  geom_bar(aes(y = vaccinated_daily, color = "Vaccinations"),
           stat = "identity",
           alpha = 0.7) +
  geom_line(aes(y = active_cases, color = "Active Cases")) +
  geom_line(aes(y = deaths_daily, color = "Deaths")) +
  scale_color_manual(
    values = c(
      "Active Cases" = "black",
      "Deaths" = "red",
      "Vaccinations" = "skyblue"
    ),
    labels = c("Active Cases", "Deaths", "Vaccinations")
  ) +
  labs(
    title = "COVID-19 Statistics",
    subtitle = "Daily Vaccinations, Active Cases, and Deaths",
    x = "Date",
    y = "Count",
    color = NULL
  ) +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1),
        legend.position = "top") +
  scale_y_continuous(labels = scales::comma) +
  guides(color = guide_legend(override.aes = list(linetype = "solid",
                                                  shape = NA)))

print(graph9)
#Here I am comparing the active cases, vaccinations and deaths, to measure how each statistics correlated with each other, such as how case spikes affected deaths and how vaccinations affected the spikes in cases
```

Graph 3:

```{r}
total_vac <- vac_clean |>
  select(date, vaccinated_daily, cases_daily)

graph10 <- ggplot(total_vac, aes(x = date)) +
  geom_area(aes(y = vaccinated_daily, fill = "Vaccinations"), alpha = 0.7) +
  geom_area(aes(y = cases_daily, fill = "Cases daily"), alpha = 0.7) +
  labs(title = "Daily Vaccinations and Cases",
       y = "Count") +
  scale_fill_manual(
    name = "Category",
    values = c(
      "Cases daily" = "#00ba38",
      "Vaccinations" = "#f8766d"
    )
  ) +
  theme_minimal() +
  theme(legend.position = "top") +
  scale_y_continuous(labels = scales::comma)


print(graph10)
#This graph focuses on showing you how people reacted to spikes in cases, for instance in July 2021, how people started taking the vaccine due to a spike which caused the spike to drop and therefore slowed the number of vaccinations used
```

Graph 4:

```{r}
total_death <- vac_clean  |>
  filter(date >= as.Date("2022-01-01") &
           date <= as.Date("2022-12-31"))  |>
  select(date, deaths_daily, cases_daily)


graph11 <- ggplot(total_death, aes(x = date)) +
  geom_bar(aes(y = cases_daily, fill = "Cases"),
           stat = "identity",
           color = "green") +
  geom_bar(aes(y = deaths_daily, fill = "Deaths"),
           stat = "identity",
           color = "red") +
  labs(x = "Date", y = "Count", title = "COVID-19 Cases and Daily Deaths") +
  theme_minimal() +
  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +
  scale_x_date(date_labels = "%b %Y", date_breaks = "1 month") +
  scale_fill_manual(
    values = c("Cases" = "green", "Deaths" = "red"),
    name = "Type",
    labels = c("Cases", "Deaths")
  )

print(graph11)
#This graph shows the relationsjip between cases and deaths, specifically looking at January 2022 to July 2022
```

Graph 5:

```{r}
USA <- map_data("world", region = "USA")
states_data_filtered <- country_csv |>
  group_by(province_state)

states_data <- subset(states_data_filtered)

USA_filtered <- USA |>
  filter(region %in% tolower(state.name) &
           !(region %in% c("hawaii", "alaska")))

state_coordinates <- lapply(states_data$State, function(state) {
  geo <- try(geocode(state), silent = TRUE)
  if (!inherits(geo, "try-error")) {
    data.frame(State = state,
               lon = geo$lon,
               lat = geo$lat)
  } else {
    data.frame(State = state,
               lon = NA,
               lat = NA)
  }
}) %>%
  bind_rows()


graph12 <- ggplot(data = USA_filtered, aes(x = long, y = lat)) +
  geom_polygon(aes(group = group),
               fill = "white",
               colour = "black") +
  geom_point(data = states_data,
             aes(
               x = long,
               y = lat,
               size = tests_combined_total,
               color = province_state
             )) +
  scale_size(range = c(1.4, 1)) +
  coord_fixed() +
  theme_void() +
  labs(
    title = "COVID-19 Tests by State",
    subtitle = "Size of points indicates total tests conducted",
    x = "Longitude",
    y = "Latitude"
  )

graph12
#This graph shows how many people took vaccinations by comparison of states in USA, it shows the states which were more vaccinated vs the ones that vaccinated less
```

Graph 6:

```{r}
change_cases <- vac_clean |>
  filter(date >= "2021-01-01" & date <= "2022-01-01") |>
  select(date, cases_daily)

color_scale <- scale_color_gradient(low = "green", high = "red")


graph13 <- ggplot(change_cases, aes(x = date, y = cases_daily)) +
  geom_point(size = 2) +
  geom_segment(aes(
    x = date,
    xend = date,
    y = 0,
    yend = cases_daily,
    color = cases_daily
  ),
  size = 0.1) +
  color_scale +
  labs(title = "Lollipop Chart", subtitle = "Number of Cases") +
  theme(axis.text.x = element_text(angle = 65, vjust = 0.6)) +
  theme_minimal()


print(graph13)
#This lollipop chart shows the number of cases daily from January 2021 to January 2022, the lollipops are coloured depending on the number of cases to show which days were worse in terms of cases being found vs which days weren't as bad
```

Graph 7:

```{r}
country_totals <- vaccine_csv %>%
  filter(Country_Region != "World") %>%
  group_by(Country_Region) %>%
  mutate(Date = as.Date(Date))

country_totals <- country_totals %>%
  summarise(Total_Doses = sum(Doses_admin, na.rm = TRUE)) %>%
  arrange(desc(Total_Doses))

top_countries <- head(country_totals$Country_Region, 10)
filtered_data <- vaccine_csv %>%
  filter(Country_Region %in% top_countries)

ggplot(filtered_data,
       aes(x = as.Date(Date), y = Doses_admin, color = Country_Region)) +
  geom_line(size = 0.2) +
  geom_point(size = 0.5) +
  labs(x = "Date", y = "Doses Administered", title = "Vaccinations by Top 10 Countries") +
  theme(axis.text.x = element_text(
    angle = 45,
    hjust = 1,
    size = 8
  ),
  legend.position = "right") +
  scale_color_discrete(guide = "legend", name = "Country") +
  scale_y_continuous(labels = scales::comma) +
  scale_x_date(date_breaks = "3 months", date_labels = "%b %y") +
  theme_minimal() +
  guides(color = guide_legend(override.aes = list(size = 3)))
#This graph takes the top 10 countries in the world in terms of number of vaccinations administered and shows how ,from the 1 of February 2021 till the 1dt of feb 2023, the speed of vaccines were administered and how many were taken per country
```
